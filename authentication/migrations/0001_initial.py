# Generated by Django 3.2.4 on 2023-08-23 20:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sessions', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_username', models.CharField(blank=True, max_length=64, null=True, verbose_name='Profile username')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='DOB')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=32, null=True, verbose_name='Phone')),
                ('telegram_id', models.BigIntegerField(blank=True, null=True, verbose_name='Telegram ID')),
                ('telegram_username', models.CharField(max_length=128, null=True, unique=True, verbose_name='Telegram Username')),
                ('unverified_telegram_username', models.CharField(blank=True, max_length=128, null=True, verbose_name='Unverified telegram_username')),
                ('telegram_verification_code', models.PositiveIntegerField(blank=True, null=True, verbose_name='Telegram Verification code')),
                ('telegram_verification_code_expired_at', models.DateTimeField(blank=True, null=True, verbose_name='Telegram Verif code created datetime')),
                ('discord_username', models.CharField(blank=True, max_length=64, null=True, verbose_name='Discord username')),
                ('language_code', models.CharField(default='ru', max_length=4, verbose_name='Language code')),
                ('is_dark_theme', models.BooleanField(default=False, verbose_name='Is Dark Theme')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Is Banned')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid')),
                ('is_tg_admin_mode', models.BooleanField(default=False, verbose_name='Is Telegram admin mode activated')),
                ('is_account_activated', models.BooleanField(default=False)),
                ('unverified_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Unverified email')),
                ('verification_code', models.PositiveIntegerField(blank=True, null=True, verbose_name='Verification code')),
                ('verification_code_expired_at', models.DateTimeField(blank=True, null=True, verbose_name='Verif code created datetime')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='partner')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserContactChange',
            fields=[
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='contact_change', serialize=False, to='authentication.user')),
                ('email_updated_date', models.DateField(null=True, verbose_name='Email Changed Date')),
                ('wallet_address_updated_date', models.DateField(null=True, verbose_name='Wallet Address Changed  Date')),
                ('discord_username_updated_date', models.DateField(null=True, verbose_name='Discord Username Changed  Date')),
                ('telegram_updated_date', models.DateField(null=True, verbose_name='Telegram Username Changed  Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_session', to='sessions.session')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_session', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('file', models.FileField(upload_to='', verbose_name='File')),
                ('order', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_default', models.BooleanField(default=False, verbose_name='Is Default')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatars', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['order'],
                'abstract': False,
            },
        ),
    ]
